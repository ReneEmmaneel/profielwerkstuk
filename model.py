import numpy as np
import cnn as cnn
import os.path

model = np.asarray([
        
        np.asarray([[-1, 0, 2, 0, -1, 0, -1, 3, -1, 0, 2, 3, 4, 3, 2, 0, -1, 3, -1, 0, -1, 0, 2, 0, -1],
         [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 3, -5, 4, 1, 0, -1, 3, -1, 0, 0, -2, 1, -2, 0],
         [0, -1, 3, -1, 0, 0, -1, 3, -1, 0, 0, -1, 3, -1, 0, 0, -1, 3, -1, 0, 0, -1, 3, -1, 0],
         [0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0],
         [0, -2, 1, -2, 0, 0, -1, 3, -1, 0, 1, 3, -5, 3, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
         [2, 1, -1, 1, 2, 1, 3, 1, 3, 1, -1, 1, 4, 1, -1, 1, 3, 1, 3, 1, 2, 1, -1, 1, 2]]),
        
        np.asarray([[1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1],
         [4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 0, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 0, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 0, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 0, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 0, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 0, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4],
         [0, 0, 0, 0, 0, -1, -1, 1, -1, -1, 1, 1, 2, 1, 1, -1, -1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -2, -2, -2, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 1, 2, 1, 1, 0, 2, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 4, 2, 1, 0, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, -2, -1, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, -2, -1, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 1, 4, 1, 1, 0, 2, 1, 2, 0, 0, 0, 1, 0, 0],
         [1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 2, 0, 2, 4, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 3, 2, 0, 1, 3, 4, 3, 1, 0, 2, 3, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, -2, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -2, -3, -2, 0, -1, -3, -4, -3, -1, 0, -2, -3, -2, 0, 0, 0, -1, 0, 0, 0, -1, 1, 3, 4, -1, -1, 1, 2, 3, 1, 1, 1, 1, 1, 3, 2, 1, -1, -1, 4, 3, 1, -1, 0],
         [0, 0, 2, 0, 0, 0, 1, 2, 1, 0, 2, 2, 3, 2, 2, 0, 1, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, -2, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 3, 1, 0, 0, 1, 4, 1, 0, 0, 1, 3, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 3, 4, 3, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, -2, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
        ]),
        
        [np.asarray([1.27299680e+00, 1.45228768e-02, 1.93963504e+00, 1.00190291e+00
,  5.38487840e-01, 5.17085489e-01, -8.83821189e-01, 2.95710787e+00
,  1.28133756e+00, -7.19235330e-01, -1.25435799e+00, -9.37270590e-01
,  2.23466991e+00, 6.59730349e-01, -8.22655630e-01, -1.25549664e+00
, -1.03257380e+00, 2.80663720e+00, 2.52601688e-01, 3.00975150e-01
, -6.14360816e-03, -6.71694962e-01, 1.75511651e+00, 1.52693658e+00
,  1.09915468e+00, 1.08290929e+00, 4.34371884e-01, 7.74429629e-01
,  9.43417195e-01, 6.18881785e-01, -1.55311531e-02, 3.19015809e-01
,  1.32216369e+00, 1.09555071e+00, 4.88535493e-01, -2.22839139e-01
,  1.95442914e-01, 1.18723528e+00, 6.19003599e-01, 2.32232478e-01
, -8.01402820e-02, 3.22259469e-01, 6.33486554e-01, 4.76349937e-01
,  3.50656749e-01, 3.26758328e-01, 7.14452058e-01, 8.92512272e-01
,  9.96903934e-01, 9.25236733e-01, 1.21322740e+00, -3.39923370e-01
,  1.80257458e+00, 1.48404770e+00, 5.72223977e-01, 1.07306802e-01
, -7.73128507e-01, 2.65795455e+00, 7.72790416e-01, -9.80936206e-01
, -1.25663073e+00, -8.36762975e-01, 2.41539217e+00, -3.38806177e-02
, -4.40484836e-01, -1.19467642e+00, -6.89676048e-02, 2.68574279e+00
,  1.59361044e-01, -3.51978144e-01, 7.09905942e-02, 5.56881163e-02
,  1.66525121e+00, -1.85481263e-01, 1.35843519e+00, 1.78206027e+00
, -7.27530574e-01, 1.65298292e+00, 6.64001151e-01, 2.95348135e-01
, -2.69057898e-01, -2.17330501e+00, 3.87428408e+00, 1.61181827e+00
, -1.35460499e+00, -1.29274364e+00, -1.90187578e+00, 3.43858736e+00
,  5.60787848e-01, -1.40562629e+00, -1.85711486e+00, -1.52418622e+00
,  4.11649635e+00, -8.84535513e-01, -2.21573536e-01, -1.74173483e-01
, -1.08681789e+00, 2.45059473e+00, -3.47362428e-01, 1.55636815e+00
,  2.06941255e+00, 4.29266056e-02, 1.11132903e-01, 3.66375753e+00
,  8.35214025e-02, -2.40570104e-03, -6.37945743e-01, 1.15625938e+00
,  2.49973955e+00, -6.56648082e-01, -1.29526025e+00, -1.14337296e+00
,  1.31816023e+00, 1.15751969e+00, -1.62399798e+00, -1.52903264e+00
,  3.10092369e-01, 1.56103377e+00, 2.02603255e-02, -9.65594387e-01
, -9.18236811e-01, 2.19183146e+00, 7.89815495e-01, 2.38070448e-01
,  1.96179577e+00, 1.15713806e+00, -8.39468345e-01, 1.21498895e+00
,  1.50376514e+00, 6.68856849e-01, -4.16224116e-02, -1.10147299e+00
,  3.24268489e+00, 1.83256554e+00, -8.79689092e-01, -7.62865758e-01
, -8.69241045e-01, 3.51342679e+00, 1.03292234e+00, -9.26432085e-01
, -5.65327684e-01, -1.09229181e+00, 3.20376961e+00, -1.56068215e-01
, -1.65617055e-01, 4.17086502e-01, -6.77609349e-01, 1.75225246e+00
, -5.32547176e-01, 1.30314551e+00, 2.64177549e-01, -7.63144086e-01
,  5.00096965e-01, -4.92418959e-01, -5.90088786e-01, -1.06012263e-01
,  1.09017439e+00, 1.89085689e+00, -1.83022505e+00, -4.24065638e-01
,  1.62545939e+00, 1.72574032e+00, 2.32534530e+00, -2.12856346e+00
,  9.54466586e-02, 1.73309572e+00, 1.85153079e+00, 1.71354863e+00
, -1.75795802e+00, 6.54261550e-01, 9.65466414e-01, 3.83415658e-02
,  1.21705106e+00, -1.03721312e+00, 4.02868126e-02, -8.29993013e-01
,  4.84741898e-01, 1.58381124e-01, -1.33586587e-01, -2.28950226e-01
,  9.64399615e-02, 7.94190293e-01, 8.00472472e-01, 1.15048868e-01
, -2.11288045e-01, 9.43118547e-01, 9.20435859e-01, 1.03473796e+00
,  4.81629909e-01, 2.28340527e-02, 1.08672431e+00, 9.80992938e-01
,  1.16079306e+00, 2.31113308e-01, -1.45638351e-01, 7.28399278e-01
,  2.66508434e-01, 2.95232845e-01, 1.45621501e-01, -3.42063771e-01
,  3.68154284e-01, -3.08326111e-01, 8.07627438e-01, -2.04034538e-01
, -3.98101307e-01, 6.16449073e-01, 6.41427916e-01, 1.36909138e+00
, -1.28151456e+00, -3.84942979e-01, 1.82922878e+00, 1.51436484e+00
,  1.75569719e+00, -1.44607211e+00, 9.42831695e-01, 1.25711253e+00
,  1.57347694e+00, 1.74176362e+00, -1.79957228e+00, 1.18676917e+00
,  5.11967633e-01, 1.28159856e+00, 1.68257140e+00, -1.45429579e+00
,  7.37992814e-01, -3.13833775e-01, -2.36384065e-01, 2.39000231e+00
, -1.13071734e+00, -2.15551674e-01, 7.06773267e-01, 1.24026000e+00
,  3.31196233e+00, -2.80934925e+00, -2.70676026e-01, 2.51773927e+00
,  2.75172941e+00, 3.27117161e+00, -3.15860714e+00, 8.73311068e-01
,  2.48942632e+00, 2.41422698e+00, 2.17283531e+00, -2.89391240e+00
,  1.93921713e+00, 1.73801437e+00, 1.49028309e+00, 2.74509100e+00
, -1.78934362e+00, 1.46492456e+00, -3.18648174e-01, -7.67231784e-01
,  5.90848896e-01, 1.28089161e+00, -2.59931874e+00, 5.69308542e-02
,  5.24040403e-01, 2.13501819e+00, -2.28464136e-01, -1.39081488e+00
,  1.76397903e+00, 2.57345867e+00, 2.07920380e+00, -4.70071076e-01
, -6.50439517e-01, 2.78756990e+00, 2.37350360e+00, 1.21889865e+00
,  3.96533847e-02, 2.07270976e-01, 1.62793631e+00, 1.72390425e+00
, -1.17826976e+00, -6.05697727e-02, 5.26893235e-01, -7.59343269e-01
, -3.02901884e-01, 1.89771149e+00, -1.01298394e+00, 1.25809902e-01
,  3.86857040e-01, 9.22495501e-01, 2.89913946e+00, -2.79842942e+00
, -2.35924799e-01, 1.78741791e+00, 1.98098145e+00, 2.45745910e+00
, -1.92949099e+00, 4.40071032e-01, 1.67750682e+00, 2.29228560e+00
,  1.91505982e+00, -2.21207919e+00, 1.56207029e+00, 1.21830856e+00
,  7.31777196e-01, 1.89957659e+00, -1.55168259e+00, 1.53547002e+00
,  2.96527969e-02, 3.32278097e-01])]

])

def use():
    return model
    
    
    
#voorbeeldje
print cnn.cnn("dataset/0/img001-001.png", model, [1,0])
    
    
    
    
    

lettersArray = ['0','1']
dataSet = []

#alle labels
lettersArray = ['0','1']
#vectors voor classificatie systeem genereren
AllLabels = np.zeros((len(lettersArray), len(lettersArray)))
for x in xrange(len(lettersArray)):
    for y in xrange(len(lettersArray)):
        if x == y:
            AllLabels[x][y] = 1

#importen van data
labelSet = []
dataSet = []

for x in xrange(len(lettersArray)):
    y = 0
    while os.path.isfile("dataset/" + lettersArray[x] + "/img" + str(x + 1).zfill(3)  + "-" + str(y + 1).zfill(3) + ".png"):
        dataSet.append(str("dataset/" + lettersArray[x] + "/img" + str(x + 1).zfill(3)  + "-" + str(y + 1).zfill(3) + ".png"))
        labelSet.append(int(x))
        y += 1
    y = 0
    while os.path.isfile("dataset/" + lettersArray[x] + "/img" + str(x + 1).zfill(3)  + "-" + str(y + 1).zfill(5) + ".png"):
        dataSet.append(str("dataset/" + lettersArray[x] + "/img" + str(x + 1).zfill(3)  + "-" + str(y + 1).zfill(5) + ".png"))
        labelSet.append(int(x))
        y += 1
dataSet = np.asarray(dataSet)

#label koppelen aan data
allData = []
i = 0
for data in dataSet:
    allData.append([data, labelSet[i]])
    i += 1

right = 0
wrong = 0
for x in range(len(allData)):
    if abs(allData[x][1] - cnn.cnn(allData[x][0], model, [1,0])[0]) > 0.5:
        right+=1
    else:
        #print allData[x][0]
        wrong+=1

print right
print wrong
print right / (right + wrong)